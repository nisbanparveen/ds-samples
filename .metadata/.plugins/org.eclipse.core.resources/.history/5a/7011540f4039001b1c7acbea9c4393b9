package LinkedList;

import java.awt.HeadlessException;

/**
 * 
 * @author Nisban Parveen
 *
 */
public class LinkedList {
	Node head;

	/**
	 * 
	 * 
	 * Linked List is used for storing collection of Data. Elements are connected by
	 * pointer. Every Node will have a data of the particular node and a
	 * pointer/reference to next node
	 *
	 *
	 */
	public static class Node {
		int data;
		Node next;

		public Node(int data) {
			this.data = data;
			next = null;
		}

	}

	/**
	 * 
	 * Insertion at the Ending of the list
	 * 
	 * 1. Create New Node and point the next pointer to NULL 
	 * 2. Point the last Nodes next pointer point to new node
	 * 
	 * @param list
	 * @param data
	 * @return list
	 */
	public static LinkedList insert(LinkedList list, int data) {
		Node new_node = new Node(data);
		new_node.next = null;

		if (list.head == null) {
			list.head = new_node;
		} else {
			Node last_node = list.head;

			while (last_node.next != null) {
				last_node = last_node.next;
			}

			last_node.next = new_node;
		}

		return list;

	}

	/**
	 * Insert Item at the beginning of the LinkedList
	 * 
	 * 1. Create New node and point the next pointer point to current Head 
	 * 2. Update the Head pointer point to new node
	 * 
	 * @param list
	 * @param data
	 * @return
	 */
	public static LinkedList insertAtBeginning(LinkedList list, int data) {
		Node new_node = new Node(data);
		new_node.next = list.head;

		if (list.head == null) {
			list.head = new_node;
		} else {
			list.head = new_node;
		}

		return list;

	}

	/**
	 * Insert at a given position
	 * 1. Calculate the size of the list, if position<1
	 * @param list
	 * @param insertNode
	 * @param position
	 * @return
	 */
	public static LinkedList insert(LinkedList list, int insertAtposition, int position) {
		Node insertNode = new Node(insertAtposition);
		if (list.head == null) {
			list.head = insertNode;
		}
		int size = count(list);
		if ((position < 0) || (position > size+1)) {
			System.out.println("Position Invalid");
			return list;
		}

		if (position == 0) {
			insertNode.next = list.head;
			list.head = insertNode;
			return list;

		} else {
			Node previousNode = list.head;
			int count = 1;
			while (count < position) {
				previousNode = previousNode.next;
				count++;
			}

			Node currenNode = previousNode.next;
			insertNode.next = currenNode;
			previousNode.next = insertNode;

		}
		return list;

	}

	/**
	 * Printing the LinkedList elements Traverse through the node until the Node
	 * points to null
	 * 
	 * @param list
	 */
	public static void printList(LinkedList list) {
		Node currentNode = list.head;

		System.out.print("LinkedList : ");
		while (currentNode != null) {
			System.out.print(currentNode.data + " ");
			currentNode = currentNode.next;
		}
		System.out.println("");
	}

	/**
	 * Traverse through the node list and return the node count
	 * 
	 * @param list
	 * @return int
	 */
	public static int count(LinkedList list) {
		int length = 0;
		Node currentNode = list.head;

		while (currentNode != null) {
			length++;
			currentNode = currentNode.next;
		}
		return length;
	}

}
